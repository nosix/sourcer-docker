From 26d511747e578f077e3d3a6f56b8ff59359449fb Mon Sep 17 00:00:00 2001
From: nosix <nosix@users.noreply.github.com>
Date: Tue, 25 Dec 2018 13:55:03 +0900
Subject: [PATCH] kids-support

---
 src/main/client/components/pages/Edit.tsx     | 66 ++++++++++++++++++-
 .../client/components/parts/AceEditor.tsx     | 16 +++++
 src/main/client/components/resources/En.ts    | 11 ++++
 src/main/client/components/resources/Ja.ts    | 11 ++++
 src/main/dts/StringResource.d.ts              | 11 ++++
 5 files changed, 113 insertions(+), 2 deletions(-)

diff --git a/src/main/client/components/pages/Edit.tsx b/src/main/client/components/pages/Edit.tsx
index 33a4242..40bd6ce 100644
--- a/src/main/client/components/pages/Edit.tsx
+++ b/src/main/client/components/pages/Edit.tsx
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import { Redirect } from 'react-router-dom';
-import { Grid, Cell, Button, Icon, Card, CardTitle, Snackbar, Spacer } from 'react-mdl';
+import { Grid, Cell, Button, Icon, Card, CardTitle, Snackbar, Spacer, List, ListItem } from 'react-mdl';
 
 import { strings } from '../resources/Strings';
 import { UserResponse } from '../../../dts/UserResponse';
@@ -33,6 +33,8 @@ export default class Edit extends React.Component<{}, EditState> {
   }
 
   private editingSource: string = '';
+  private lastSource: string = '';
+  private minSource: string = 'var bot = function(controller) {};\nreturn bot;';
 
   private onTextChange = (value: string) => {
     this.editingSource = value;
@@ -56,7 +58,8 @@ export default class Edit extends React.Component<{}, EditState> {
     if (!user || user.source === undefined) {
       return;
     }
-    this.editingSource = user.source;
+    this.lastSource = user.source;
+    this.editingSource = this.lastSource;
     this.setState({
       user,
       playerInfo: { name: 'You', source: user.source, color: '#866' },
@@ -80,7 +83,22 @@ export default class Edit extends React.Component<{}, EditState> {
     this.setState({ redirectToTop: true });
   }
 
+  public insert(snippet: string, backCursor: number=0) {
+    return (_event?: React.FormEvent<{}>) => {
+        (this.refs.editor as AceEditor).insertCode(snippet, backCursor);
+    };
+  }
+
+  public clear(_event?: React.FormEvent<{}>) {
+      (this.refs.editor as AceEditor).setCode(this.minSource);
+  }
+
+  public restore(_event?: React.FormEvent<{}>) {
+      (this.refs.editor as AceEditor).setCode(this.lastSource);
+  }
+
   public reload(_event?: React.FormEvent<{}>) {
+    this.lastSource = this.editingSource;
     (this.refs.arena as ArenaTag).onReload();
   }
 
@@ -131,7 +149,51 @@ export default class Edit extends React.Component<{}, EditState> {
                 </Button>
               </CardTitle>
             </Card>
+            <Card shadow={0} style={{ width: '100%', marginBottom: '8px', minHeight: '53px' }}>
+              <List style={{ paddingTop: '0px', paddingBottom: '0px' }}>
+                <ListItem style={{ width: '100%', paddingTop: '0px', paddingBottom: '0px' }}>
+                  <Button raised ripple colored onClick={this.clear.bind(this)}>
+                    {resource.codeClear}
+                  </Button>
+                  <Button raised ripple colored onClick={this.restore.bind(this)}>
+                    {resource.codeRestore}
+                  </Button>
+                  <Spacer />
+                  <Button raised ripple colored onClick={this.insert('if () {} else {}', 12).bind(this)}>
+                    {resource.codeIf}
+                  </Button>
+                  <Button raised ripple colored onClick={this.insert('var x = 0;', 5).bind(this)}>
+                    {resource.codeVariable}
+                  </Button>
+                </ListItem>
+                <ListItem style={{ width: '100%', paddingTop: '0px', paddingBottom: '0px' }}>
+                  <Button raised ripple colored onClick={this.insert('controller.ascent();').bind(this)}>
+                    {resource.codeAscent}
+                  </Button>
+                  <Button raised ripple colored onClick={this.insert('controller.descent();').bind(this)}>
+                    {resource.codeDescent}
+                  </Button>
+                  <Button raised ripple colored onClick={this.insert('controller.fireLaser(0, 1);').bind(this)}>
+                    {resource.codeFire}
+                  </Button>
+                  <Button raised ripple colored onClick={this.insert('controller.turn();').bind(this)}>
+                    {resource.codeTurn}
+                  </Button>
+                  <Spacer />
+                  <Button raised ripple colored onClick={this.insert('controller.altitude() < 50').bind(this)}>
+                    {resource.codeAltitude}
+                  </Button>
+                  <Button raised ripple colored onClick={this.insert('controller.frame() % 10 === 0').bind(this)}>
+                    {resource.codeFrame}
+                  </Button>
+                  <Button raised ripple colored onClick={this.insert('controller.scanEnemy(180, 180)').bind(this)}>
+                    {resource.codeScanEnemy}
+                  </Button>
+                </ListItem>
+              </List>
+            </Card>
             <AceEditor
+              ref="editor"
               code={this.editingSource}
               onChange={this.onTextChange}
               onSave={this.save.bind(this)}
diff --git a/src/main/client/components/parts/AceEditor.tsx b/src/main/client/components/parts/AceEditor.tsx
index 6bc8289..d2e0f77 100644
--- a/src/main/client/components/parts/AceEditor.tsx
+++ b/src/main/client/components/parts/AceEditor.tsx
@@ -70,6 +70,22 @@ export default class AceEditor extends React.Component<AceEditorProps, {}> {
     node.removeEventListener('keydown', this.onKeyDown);
   }
 
+  public insertCode(code: string, backCursor: number) {
+    if (this.editor) {
+      this.editor.insert(code);
+      const cursor = this.editor.selection.getCursor();
+      this.editor.gotoLine(cursor.row + 1, cursor.column - backCursor);
+      this.editor.focus();
+    }
+  }
+
+  public setCode(code: string) {
+      if (this.editor) {
+        this.editor.setValue(code, -1); // cursorPos is at the document start
+        this.editor.focus();
+      }
+  }
+
   public render() {
     const style = { fontSize: '14px !important', border: '1px solid lightgray' };
     return (
diff --git a/src/main/client/components/resources/En.ts b/src/main/client/components/resources/En.ts
index 2bb2574..55a4770 100644
--- a/src/main/client/components/resources/En.ts
+++ b/src/main/client/components/resources/En.ts
@@ -61,4 +61,15 @@ export class En implements StringResource {
   public invalidNameTooLong = 'Name is too long.';
   public invalidTeamNameEmpty = 'Team name is empty.';
   public invalidTeamNameTooLong = 'Team name is too long.';
+  public codeClear = 'Clear';
+  public codeRestore = 'Restore';
+  public codeIf = 'If';
+  public codeVariable = 'Variable';
+  public codeAscent = 'Up';
+  public codeDescent = 'Down';
+  public codeFire = 'Fire';
+  public codeTurn = 'Turn';
+  public codeAltitude = 'How high?';
+  public codeFrame = 'How many times?';
+  public codeScanEnemy = 'Is there enemy?';
 }
diff --git a/src/main/client/components/resources/Ja.ts b/src/main/client/components/resources/Ja.ts
index 6978729..efe8abb 100644
--- a/src/main/client/components/resources/Ja.ts
+++ b/src/main/client/components/resources/Ja.ts
@@ -61,4 +61,15 @@ export class Ja implements StringResource {
   public invalidNameTooLong = 'プレイヤー名が20文字以内である必要があります。';
   public invalidTeamNameEmpty = 'チーム名が未入力です。';
   public invalidTeamNameTooLong = 'チーム名が20文字以内である必要があります。';
+  public codeClear = '最初から';
+  public codeRestore = '戻す';
+  public codeIf = 'もし';
+  public codeVariable = '変数';
+  public codeAscent = '上昇';
+  public codeDescent = '下降';
+  public codeFire = '攻撃';
+  public codeTurn = '反転';
+  public codeAltitude = '高度は？';
+  public codeFrame = '何回目？';
+  public codeScanEnemy = '敵はいる？';
 }
diff --git a/src/main/dts/StringResource.d.ts b/src/main/dts/StringResource.d.ts
index 1c6407c..b2d20ff 100644
--- a/src/main/dts/StringResource.d.ts
+++ b/src/main/dts/StringResource.d.ts
@@ -60,6 +60,17 @@ export interface StringResource {
   invalidNameTooLong: string;
   invalidTeamNameEmpty: string;
   invalidTeamNameTooLong: string;
+  codeClear: string;
+  codeRestore: string;
+  codeIf: string;
+  codeVariable: string;
+  codeAscent: string;
+  codeDescent: string;
+  codeFire: string;
+  codeTurn: string;
+  codeAltitude: string;
+  codeFrame: string;
+  codeScanEnemy: string;
 }
 
 type ResourceId = keyof StringResource;
-- 
2.17.2 (Apple Git-113)

